from django.http import HttpResponse
from django.shortcuts import render, render_to_response, get_object_or_404, Http404
from django.forms.models import modelformset_factory
from django import forms
from django.db.models import Q
from django.contrib.auth.models import User
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required

from robot.models import *
import ldap


<<<<<<< HEAD
def check_user(username, password):
    server = "ldaps://ldap.bordeaux.inria.fr"
    user_dn = 'uid=%s,ou=bordeaux,ou=futurs,ou=users,dc=futurs,dc=inria,dc=fr' % username
    user_pw = password

    l = ldap.initialize(server)
    try:
        l.bind_s(user_dn, user_pw)
        return True
    except ldap.INVALID_CREDENTIALS:
        return False
    except ldap.LDAPError, e:
        return False
    return False

=======
>>>>>>> master

def logout_mm(request):
    logout(request)
    return render_to_response('login.html')
    

def index(request):
    if request.method == "POST":
        name = request.POST["username"]
        pswd = request.POST["password"]
        if check_user(name, pswd) == True:
            user = authenticate(username=name, password=pswd)
            if user is None:
                users = User.objects.filter(username=name)
                if len(users) == 0:
                    user = User.objects.create_user(username=name, password=pswd, email="")
                    user.save()
                else:
                    user = users[0]
                    user.set_password(pswd)
                    user.save()
            user = authenticate(username=name, password=pswd)
            if user is not None:
                login(request, user)

    if request.user.is_authenticated():
        all_robot = Robot.objects.all() 
        return render_to_response('index.html', {'all_robot': all_robot})
    if request.method == 'POST':
        return render_to_response('login.html', {"error":"on"})
    return render_to_response('login.html')


@login_required
def init(request):
    MotorType(name='USB2Dynamixel').save()
    MotorType(name='SMPS2Dynamixel').save()
    MotorType(name='RX28').save()
    MotorType(name='RX64').save()
    Location(name="Bordeaux").save()
    Location(name="Fondation Cartier").save()
    State(name="OK").save()
    State(name="Not well").save()
    State(name="BREAK").save()
    return render_to_response('init.html')

@login_required
def robot_detail(request, robot_id): 
    try:
        p = Robot.objects.get(pk=robot_id)
    except Robot.DoesNotExist:
        raise Http404
    slots = Slot.objects.filter(robot=robot_id)
    price = 0
    for slot in slots:

        if slot.kind.name == "RX64":
            price = price + 350
        if slot.kind.name == "RX28":
            price = price + 250
    
        assoc = Association.objects.filter(slot=slot, end_time=None)
        if len(assoc) > 0:
            slot.assoc = assoc[0]
        else:
            slot.assoc = ""
    return render_to_response('robot.html', {'robot': p, 'slots':slots,
                                             "robot_id":robot_id,
                                             "price":price})

@login_required
def robots(request):
    return render_to_response('index.html')

@login_required
def edit_robot(request, robot_id):
    error = ""
    success = ""
    robot = Robot.objects.get(pk=robot_id)
    if request.method == "POST":
        formset = RobotForm(request.POST, request.FILES, instance=robot)
        if formset.is_valid():
            print formset.data
            formset.save()
            success = "Robot saved"
        else:
            error = "Something wrong"
    else:
        formset = RobotForm(instance=robot)
    return render(request, 'robot_form.html', {"formset":formset,
                                              "error":error,
                                              "success":success,
                                               "robot_id":robot_id})

@login_required
def delete_robot(request, robot_id):
    robot = Robot.objects.get(pk=robot_id)
    robot.delete()
    return render_to_response('robot_deleted.html')

@login_required
def disable_robot(request, robot_id):
    #    try:
    robot = Robot.objects.get(pk=robot_id)
    if robot.active == True:
        robot.active = False
        robot.save()
        # I close all association with this robot ...
        slots = Slot.objects.filter(robot=robot_id)
        for s in slots:
            assocs = Association.objects.filter(slot=s)
            for assoc in assocs:
                assoc.end_date = datetime.now()
                assoc.end_time = datetime.now()
                assoc.save()
    return robot_detail(request, robot_id)


@login_required
def enable_robot(request, robot_id):
    #    try:
    robot = Robot.objects.get(pk=robot_id)
    if robot.active == False:
        robot.active = True
        robot.save()

    return robot_detail(request, robot_id)

@login_required
def clone_robot(request, robot_id):
    robot = Robot.objects.get(pk=robot_id)
    if robot > 0:
        new_robot = Robot(name=robot.name+"_clone_"+str(robot_id),
                          date=datetime.now(),
                          time=datetime.now(),
                           image=robot.image)
        new_robot.save()
        slots = Slot.objects.filter(robot=robot.id)
        for slot in slots:
            new_slot = Slot(robot=new_robot,kind=slot.kind,name=slot.name)
            new_slot.save()


        return robot_detail(request, new_robot.id)

    # what is this robot id ?
    raise Http404

@login_required
def new_robot(request):
    error = ""
    success = ""
    if request.method == "POST":
        formset = RobotForm(request.POST, request.FILES)
        if formset.is_valid():
            formset.save()
            success = "Robot saved"
        else:
            error = "Something wrong"
    else:
        formset = RobotForm()
    return render(request, 'robot_form.html', {"formset":formset,
                                              "error":error,
                                              "success":success})

@login_required
def new_event(request, motor_id):
    error = ""
    success = ""
    if request.method == "POST":
        formset = MotorEventForm(request.POST, request.FILES)
        if formset.is_valid():
            event = MotorEvent(device=Motor.objects.get(pk=motor_id),
                               state=formset.cleaned_data['state'],
                               date=formset.cleaned_data['date'],
                               time=formset.cleaned_data['time'],
                               description=formset.cleaned_data['description'])
            event.save()
            success = "Slot saved"
        else:
            error = "Something wrong"
    else:
        formset = MotorEventForm()
    return render(request, 'event_form.html', {"formset":formset,
                                              "error":error,
                                              "success":success})


@login_required
def type(request):
    all_type = MotorType.objects.all() 
    return render_to_response('types.html', {'all_type': all_type})

@login_required
def new_type(request):
    if request.method == "POST":
        formset = MotorTypeForm(request.POST, request.FILES)
        if formset.is_valid():
            n = request.POST.get('name', '')
            if len(n) > 0:
                print n
                p = MotorType.objects.filter(name=n)
                if len(p) == 0:
                    d = MotorType(name=n)
                    d.save()
    else:
        formset = MotorTypeForm()

    all_type = MotorType.objects.all() 
    return render(request, 'type.html', {"formset":formset, 'all_type': all_type})

@login_required
def new_slot(request, robot_id):
    error = ""
    success = ""
    if request.method == "POST":
        formset = SlotForm(request.POST, request.FILES)
        if formset.is_valid():
            dt = MotorType.objects.filter(name=formset.cleaned_data['kind'])
            r = Robot.objects.get(pk=robot_id)
            if len(dt) > 0:
                occ = Slot(robot=r, kind=dt[0], name=formset.cleaned_data['name'])
                occ.save()
                success = "Slot saved"
        else:
            error = "Something wrong"
    else:
        formset = SlotForm()
    return render(request, 'slot_form.html', {"formset":formset,
                                              "error":error,
                                              "success":success,
                                              "robot_id":robot_id})


@login_required
def edit_slot(request, slot_id):
    error = ""
    success = ""
    slot = Slot.objects.get(pk=slot_id)
    robot_id = slot.robot.id
    if request.method == "POST":
        formset = SlotForm(request.POST, request.FILES, instance=slot)
        if formset.is_valid():
            formset.save()
            success = "Slot saved"
        else:
            error = "Something wrong"
    else:
        formset = SlotForm(instance=slot)
    return render(request, 'slot_form.html', {"formset":formset,
                                              "error":error,
                                              "success":success,
                                              "robot_id":robot_id,
                                              "slot_id":slot_id})



@login_required
def remove_slot(request, slot_id):
    error = ""
    success = ""
    slot = Slot.objects.get(pk=slot_id)
    robot_id = slot.robot.id
    return render(request, 'slot_delete.html', {"slot":slot,
                                              "error":error,
                                              "success":success,
                                              "robot_id":robot_id,
                                              "slot_id":slot_id})

@login_required
def removed_slot(request, slot_id):
    slot = Slot.objects.get(pk=slot_id)
    slot.delete()
    return render_to_response('slot_deleted.html')

@login_required
def slot(request, slot_id):
    slot = Slot.objects.get(pk=slot_id)
    all_association = Association.objects.filter(slot=slot_id)
    active = Association.objects.filter(slot=slot_id, end_date=None)
    if len(active):
        if request.method == "POST":
            if request.POST['end']:
                active[0].end_date = datetime.now()
                active[0].end_time = datetime.now()
                active[0].save()

    new_assoc = False

    if Robot.objects.get(pk=slot.robot.id).active == True:
        # an association is active ?
        active = Association.objects.filter(slot=slot_id, end_date=None)
        if len(active) == 0:
            new_assoc = True

    if new_assoc == True:
        return render_to_response('slot.html', {'slot':slot,
                                                'all_association':all_association,
                                                'new_assoc':'a',
                                                "robot_id":slot.robot.id})
    else:
        return render_to_response('slot.html', {'slot':slot,
                                                'all_association':all_association,
                                                "robot_id":slot.robot.id})
        

@login_required
def edit_motor(request, motor_id):
    error = ""
    success = ""
    motor = Motor.objects.get(pk=motor_id)
    if request.method == "POST":
        formset = MotorForm(request.POST, request.FILES, instance=motor)
        if formset.is_valid():
            formset.save()
            success = "Motor saved"
        else:
            error = "Something wrong"
    else:
        formset = MotorForm(instance=motor)
    return render(request, 'motor_form.html', {"formset":formset,
                                              "error":error,
                                              "success":success})


@login_required
def new_motor(request):
    error = ""
    success = ""
    if request.method == "POST":
        formset = MotorForm(request.POST, request.FILES)
        if formset.is_valid():
            formset.save()
            success = "Motor saved"
        else:
            error = "Something wrong"
    else:
        formset = MotorForm()
    return render(request, 'motor_form.html', {"formset":formset,
                                              "error":error,
                                              "success":success})

@login_required
def motor(request, motor_id):
    motor = Motor.objects.get(pk=motor_id)
    all_association = Association.objects.filter(device=motor)
    assocs = Association.objects.filter(device=motor, end_date=None)
    if len(assocs) > 0:
        asso = assocs[0]
        motor.usage = True
    else:
        asso = ''
        motor.usage = ''
    all_event = MotorEvent.objects.filter(device=motor)
    return render(request, 'motor.html', {"motor":motor,
                                          "all_association":all_association,
                                          "all_event":all_event,
                                          "asso":asso})

@login_required
def motors(request):
    motors = Motor.objects.all()
    for motor in motors:
        used = Association.objects.filter(device=motor).exclude(end_date=None)
        motor.used_times = len(used)
        assocs = Association.objects.filter(device=motor, end_date=None)
        if len(assocs) > 0:
            motor.usage = True
            motor.used_times = 1 + motor.used_times
        else:
            motor.usage = ''
    return render(request, 'motors.html', {'motors':motors})

@login_required
def search(request):
    query = request.POST.get('q', '')
    if query:
        qset = (
            Q(name__icontains=query)
        )
        motors = Motor.objects.filter(qset).distinct()
    else:
        motors = []
    for motor in motors:
        assocs = Association.objects.filter(device=motor, end_date=None)
        if len(assocs) > 0:
            motor.usage = True
        else:
            motor.usage = ''
    return render(request, 'motors.html', {'motors':motors})

@login_required
def new_association(request, slot_id):
    error = ""
    success = ""
    slot = Slot.objects.get(pk=slot_id)
    if request.method == "POST":
        formset = AssociationForm(request.POST, request.FILES)
        
        if formset.is_valid():
        #    formset.save()
            motor = formset.cleaned_data['device']
            start_date = formset.cleaned_data['start_date']
            start_time = formset.cleaned_data['start_time']
            description = formset.cleaned_data['description']
            assoc = Association(device=motor, slot=slot,
                                start_date=start_date, start_time=start_time,
                                description=description)
            assoc.save()
            success = "Association saved"
        else:
            error = "Something wrong"
    else:
        assoc = Association(slot=slot)
        formset = AssociationForm(instance=assoc)

    return render(request, 'association_form.html', {"formset":formset,
                                              "error":error,
                                              "success":success,
                                              "slot_id":slot_id})

def help(request):
    return render(request, 'help.html')

